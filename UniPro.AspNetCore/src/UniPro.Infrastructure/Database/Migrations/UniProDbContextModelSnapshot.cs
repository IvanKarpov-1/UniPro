// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UniPro.Infrastructure.Database;

#nullable disable

namespace UniPro.Infrastructure.Database.Migrations
{
    [DbContext(typeof(UniProDbContext))]
    partial class UniProDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UniPro.Domain.Entities.Academic", b =>
                {
                    b.Property<int>("AcademicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("academic_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AcademicId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer")
                        .HasColumnName("university_id");

                    b.HasKey("AcademicId")
                        .HasName("pk_academics");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_academics_university_id");

                    b.ToTable("academics", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.Course", b =>
                {
                    b.Property<long>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("course_name");

                    b.Property<int>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.HasKey("CourseId")
                        .HasName("pk_courses");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcademicId")
                        .HasColumnType("integer")
                        .HasColumnName("academic_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.HasKey("DepartmentId")
                        .HasName("pk_departments");

                    b.HasIndex("AcademicId")
                        .HasDatabaseName("ix_departments_academic_id");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.Grade", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("student_id");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.Property<float>("GradeValue")
                        .HasColumnType("real")
                        .HasColumnName("grade_value");

                    b.Property<bool>("IsAgreed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_agreed");

                    b.HasKey("StudentId", "TaskId")
                        .HasName("pk_grades");

                    b.ToTable("grades", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.StudentGroup", b =>
                {
                    b.Property<int>("StudentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("student_group_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentGroupId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("StudentGroupId")
                        .HasName("pk_student_groups");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_student_groups_department_id");

                    b.ToTable("student_groups", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.StudentInfo", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("student_id")
                        .IsFixedLength();

                    b.Property<int>("AcademicId")
                        .HasColumnType("integer")
                        .HasColumnName("academic_id");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("student_group_id");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer")
                        .HasColumnName("university_id");

                    b.HasKey("StudentId")
                        .HasName("pk_student_infos");

                    b.HasIndex("AcademicId")
                        .HasDatabaseName("ix_student_infos_academic_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_student_infos_department_id");

                    b.HasIndex("StudentGroupId")
                        .HasDatabaseName("ix_student_infos_student_group_id");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_student_infos_university_id");

                    b.ToTable("student_infos", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.StudentTask", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("student_id")
                        .IsFixedLength();

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.Property<long>("TaskTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_type_id");

                    b.HasKey("StudentId", "TaskId")
                        .HasName("pk_student_tasks");

                    b.HasIndex("TaskTypeId")
                        .HasDatabaseName("ix_student_tasks_task_type_id");

                    b.ToTable("student_tasks", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StAllAuthRecipeUser", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.Property<bool>("IsLinkedOrIsAPrimaryUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_linked_or_is_a_primary_user");

                    b.Property<string>("PrimaryOrRecipeUserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("primary_or_recipe_user_id")
                        .IsFixedLength();

                    b.Property<long>("PrimaryOrRecipeUserTimeJoined")
                        .HasColumnType("bigint")
                        .HasColumnName("primary_or_recipe_user_time_joined");

                    b.Property<string>("RecipeId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("recipe_id");

                    b.Property<long>("TimeJoined")
                        .HasColumnType("bigint")
                        .HasColumnName("time_joined");

                    b.HasKey("AppId", "TenantId", "UserId")
                        .HasName("st_all_auth_recipe_users_pkey");

                    b.HasIndex("AppId", "PrimaryOrRecipeUserId")
                        .HasDatabaseName("ix_st_all_auth_recipe_users_app_id_primary_or_recipe_user_id");

                    b.HasIndex(new[] { "AppId", "TenantId" }, "all_auth_recipe_tenant_id_index")
                        .HasDatabaseName("ix_st_all_auth_recipe_users_app_id_tenant_id");

                    b.HasIndex(new[] { "AppId" }, "all_auth_recipe_user_app_id_index")
                        .HasDatabaseName("ix_st_all_auth_recipe_users_app_id");

                    b.HasIndex(new[] { "AppId", "UserId" }, "all_auth_recipe_user_id_app_id_index")
                        .HasDatabaseName("ix_st_all_auth_recipe_users_app_id_user_id");

                    b.HasIndex(new[] { "UserId" }, "all_auth_recipe_user_id_index")
                        .HasDatabaseName("ix_st_all_auth_recipe_users_user_id");

                    b.HasIndex(new[] { "AppId", "TenantId", "PrimaryOrRecipeUserTimeJoined", "PrimaryOrRecipeUserId" }, "all_auth_recipe_users_pagination_index1")
                        .IsDescending(false, false, true, true)
                        .HasDatabaseName("ix_st_all_auth_recipe_users_app_id_tenant_id_primary_or_recipe");

                    b.HasIndex(new[] { "AppId", "TenantId", "PrimaryOrRecipeUserTimeJoined", "PrimaryOrRecipeUserId" }, "all_auth_recipe_users_pagination_index2")
                        .IsDescending(false, false, false, true)
                        .HasDatabaseName("ix_st_all_auth_recipe_users_app_id_tenant_id_primary_or_recipe1");

                    b.HasIndex(new[] { "RecipeId", "AppId", "TenantId", "PrimaryOrRecipeUserTimeJoined", "PrimaryOrRecipeUserId" }, "all_auth_recipe_users_pagination_index3")
                        .IsDescending(false, false, false, true, true)
                        .HasDatabaseName("ix_st_all_auth_recipe_users_recipe_id_app_id_tenant_id_primary");

                    b.HasIndex(new[] { "RecipeId", "AppId", "TenantId", "PrimaryOrRecipeUserTimeJoined", "PrimaryOrRecipeUserId" }, "all_auth_recipe_users_pagination_index4")
                        .IsDescending(false, false, false, false, true)
                        .HasDatabaseName("ix_st_all_auth_recipe_users_recipe_id_app_id_tenant_id_primary1");

                    b.HasIndex(new[] { "PrimaryOrRecipeUserId", "AppId" }, "all_auth_recipe_users_primary_user_id_index")
                        .HasDatabaseName("ix_st_all_auth_recipe_users_primary_or_recipe_user_id_app_id");

                    b.HasIndex(new[] { "AppId", "RecipeId", "TenantId" }, "all_auth_recipe_users_recipe_id_index")
                        .HasDatabaseName("ix_st_all_auth_recipe_users_app_id_recipe_id_tenant_id");

                    b.ToTable("st_all_auth_recipe_users", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StApp", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<long?>("CreatedAtTime")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at_time");

                    b.HasKey("AppId")
                        .HasName("st_apps_pkey");

                    b.ToTable("st_apps", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StAppIdToUserId", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.Property<bool>("IsLinkedOrIsAPrimaryUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_linked_or_is_a_primary_user");

                    b.Property<string>("PrimaryOrRecipeUserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("primary_or_recipe_user_id")
                        .IsFixedLength();

                    b.Property<string>("RecipeId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("recipe_id");

                    b.HasKey("AppId", "UserId")
                        .HasName("st_app_id_to_user_id_pkey");

                    b.HasIndex("AppId", "PrimaryOrRecipeUserId")
                        .HasDatabaseName("ix_st_app_id_to_user_id_app_id_primary_or_recipe_user_id");

                    b.HasIndex(new[] { "AppId" }, "app_id_to_user_id_app_id_index")
                        .HasDatabaseName("ix_st_app_id_to_user_id_app_id");

                    b.HasIndex(new[] { "PrimaryOrRecipeUserId", "AppId" }, "app_id_to_user_id_primary_user_id_index")
                        .HasDatabaseName("ix_st_app_id_to_user_id_primary_or_recipe_user_id_app_id");

                    b.HasIndex(new[] { "UserId", "AppId" }, "app_id_to_user_id_user_id_index")
                        .HasDatabaseName("ix_st_app_id_to_user_id_user_id_app_id");

                    b.ToTable("st_app_id_to_user_id", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StBulkImportUser", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<string>("ErrorMsg")
                        .HasColumnType("text")
                        .HasColumnName("error_msg");

                    b.Property<string>("PrimaryUserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("primary_user_id");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("raw_data");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'NEW'::character varying");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_at");

                    b.HasKey("AppId", "Id")
                        .HasName("st_bulk_import_users_pkey");

                    b.HasIndex(new[] { "AppId", "Status", "CreatedAt", "Id" }, "bulk_import_users_pagination_index1")
                        .IsDescending(false, false, true, true)
                        .HasDatabaseName("ix_st_bulk_import_users_app_id_status_created_at_id");

                    b.HasIndex(new[] { "AppId", "CreatedAt", "Id" }, "bulk_import_users_pagination_index2")
                        .IsDescending(false, true, true)
                        .HasDatabaseName("ix_st_bulk_import_users_app_id_created_at_id");

                    b.HasIndex(new[] { "AppId", "Status", "UpdatedAt" }, "bulk_import_users_status_updated_at_index")
                        .HasDatabaseName("ix_st_bulk_import_users_app_id_status_updated_at");

                    b.ToTable("st_bulk_import_users", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StDashboardUser", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password_hash");

                    b.Property<long>("TimeJoined")
                        .HasColumnType("bigint")
                        .HasColumnName("time_joined");

                    b.HasKey("AppId", "UserId")
                        .HasName("st_dashboard_users_pkey");

                    b.HasIndex(new[] { "AppId" }, "dashboard_users_app_id_index")
                        .HasDatabaseName("ix_st_dashboard_users_app_id");

                    b.HasIndex(new[] { "AppId", "Email" }, "st_dashboard_users_email_key")
                        .IsUnique()
                        .HasDatabaseName("ix_st_dashboard_users_app_id_email");

                    b.ToTable("st_dashboard_users", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StDashboardUserSession", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("SessionId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("session_id")
                        .IsFixedLength();

                    b.Property<long>("Expiry")
                        .HasColumnType("bigint")
                        .HasColumnName("expiry");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("bigint")
                        .HasColumnName("time_created");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.HasKey("AppId", "SessionId")
                        .HasName("st_dashboard_user_sessions_pkey");

                    b.HasIndex(new[] { "Expiry" }, "dashboard_user_sessions_expiry_index")
                        .HasDatabaseName("ix_st_dashboard_user_sessions_expiry");

                    b.HasIndex(new[] { "AppId", "UserId" }, "dashboard_user_sessions_user_id_index")
                        .HasDatabaseName("ix_st_dashboard_user_sessions_app_id_user_id");

                    b.ToTable("st_dashboard_user_sessions", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StEmailpasswordPswdResetToken", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.Property<string>("Token")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("token");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<long>("TokenExpiry")
                        .HasColumnType("bigint")
                        .HasColumnName("token_expiry");

                    b.HasKey("AppId", "UserId", "Token")
                        .HasName("st_emailpassword_pswd_reset_tokens_pkey");

                    b.HasIndex(new[] { "TokenExpiry" }, "emailpassword_password_reset_token_expiry_index")
                        .HasDatabaseName("ix_st_emailpassword_pswd_reset_tokens_token_expiry");

                    b.HasIndex(new[] { "AppId", "UserId" }, "emailpassword_pswd_reset_tokens_user_id_index")
                        .HasDatabaseName("ix_st_emailpassword_pswd_reset_tokens_app_id_user_id");

                    b.HasIndex(new[] { "Token" }, "st_emailpassword_pswd_reset_tokens_token_key")
                        .IsUnique()
                        .HasDatabaseName("ix_st_emailpassword_pswd_reset_tokens_token");

                    b.ToTable("st_emailpassword_pswd_reset_tokens", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StEmailpasswordUser", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password_hash");

                    b.Property<long>("TimeJoined")
                        .HasColumnType("bigint")
                        .HasColumnName("time_joined");

                    b.HasKey("AppId", "UserId")
                        .HasName("st_emailpassword_users_pkey");

                    b.HasIndex(new[] { "AppId", "Email" }, "emailpassword_users_email_index")
                        .HasDatabaseName("ix_st_emailpassword_users_app_id_email");

                    b.ToTable("st_emailpassword_users", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StEmailpasswordUserToTenant", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.HasKey("AppId", "TenantId", "UserId")
                        .HasName("st_emailpassword_user_to_tenant_pkey");

                    b.HasIndex(new[] { "AppId", "TenantId", "Email" }, "emailpassword_user_to_tenant_email_index")
                        .HasDatabaseName("ix_st_emailpassword_user_to_tenant_app_id_tenant_id_email");

                    b.HasIndex(new[] { "AppId", "TenantId", "Email" }, "st_emailpassword_user_to_tenant_email_key")
                        .IsUnique()
                        .HasDatabaseName("ix_st_emailpassword_user_to_tenant_app_id_tenant_id_email1");

                    b.ToTable("st_emailpassword_user_to_tenant", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StEmailverificationToken", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("Token")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("token");

                    b.Property<long>("TokenExpiry")
                        .HasColumnType("bigint")
                        .HasColumnName("token_expiry");

                    b.HasKey("AppId", "TenantId", "UserId", "Email", "Token")
                        .HasName("st_emailverification_tokens_pkey");

                    b.HasIndex(new[] { "TokenExpiry" }, "emailverification_tokens_index")
                        .HasDatabaseName("ix_st_emailverification_tokens_token_expiry");

                    b.HasIndex(new[] { "AppId", "TenantId" }, "emailverification_tokens_tenant_id_index")
                        .HasDatabaseName("ix_st_emailverification_tokens_app_id_tenant_id");

                    b.HasIndex(new[] { "Token" }, "st_emailverification_tokens_token_key")
                        .IsUnique()
                        .HasDatabaseName("ix_st_emailverification_tokens_token");

                    b.ToTable("st_emailverification_tokens", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StEmailverificationVerifiedEmail", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.HasKey("AppId", "UserId", "Email")
                        .HasName("st_emailverification_verified_emails_pkey");

                    b.HasIndex(new[] { "AppId" }, "emailverification_verified_emails_app_id_index")
                        .HasDatabaseName("ix_st_emailverification_verified_emails_app_id");

                    b.ToTable("st_emailverification_verified_emails", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StJwtSigningKey", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("KeyId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("key_id");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("algorithm");

                    b.Property<long?>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<string>("KeyString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key_string");

                    b.HasKey("AppId", "KeyId")
                        .HasName("st_jwt_signing_keys_pkey");

                    b.HasIndex(new[] { "AppId" }, "jwt_signing_keys_app_id_index")
                        .HasDatabaseName("ix_st_jwt_signing_keys_app_id");

                    b.ToTable("st_jwt_signing_keys", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StKeyValue", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<long?>("CreatedAtTime")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at_time");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("AppId", "TenantId", "Name")
                        .HasName("st_key_value_pkey");

                    b.HasIndex(new[] { "AppId", "TenantId" }, "key_value_tenant_id_index")
                        .HasDatabaseName("ix_st_key_value_app_id_tenant_id");

                    b.ToTable("st_key_value", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StOauthClient", b =>
                {
                    b.Property<string>("AppId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id");

                    b.Property<string>("ClientId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<bool>("EnableRefreshTokenRotation")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_refresh_token_rotation");

                    b.Property<bool>("IsClientCredentialsOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_client_credentials_only");

                    b.HasKey("AppId", "ClientId")
                        .HasName("st_oauth_clients_pkey");

                    b.ToTable("st_oauth_clients", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StOauthLogoutChallenge", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("Challenge")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("challenge");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_id");

                    b.Property<string>("PostLogoutRedirectUri")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("post_logout_redirect_uri");

                    b.Property<string>("SessionHandle")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("session_handle");

                    b.Property<string>("State")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("state");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("bigint")
                        .HasColumnName("time_created");

                    b.HasKey("AppId", "Challenge")
                        .HasName("st_oauth_logout_challenges_pkey");

                    b.HasIndex("AppId", "ClientId")
                        .HasDatabaseName("ix_st_oauth_logout_challenges_app_id_client_id");

                    b.HasIndex(new[] { "TimeCreated" }, "oauth_logout_challenges_time_created_index")
                        .IsDescending()
                        .HasDatabaseName("ix_st_oauth_logout_challenges_time_created");

                    b.ToTable("st_oauth_logout_challenges", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StOauthM2mToken", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("ClientId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_id");

                    b.Property<long>("Iat")
                        .HasColumnType("bigint")
                        .HasColumnName("iat");

                    b.Property<long>("Exp")
                        .HasColumnType("bigint")
                        .HasColumnName("exp");

                    b.HasKey("AppId", "ClientId", "Iat")
                        .HasName("st_oauth_m2m_tokens_pkey");

                    b.HasIndex(new[] { "Exp" }, "oauth_m2m_token_exp_index")
                        .IsDescending()
                        .HasDatabaseName("ix_st_oauth_m2m_tokens_exp");

                    b.HasIndex(new[] { "Iat", "AppId" }, "oauth_m2m_token_iat_index")
                        .IsDescending()
                        .HasDatabaseName("ix_st_oauth_m2m_tokens_iat_app_id");

                    b.ToTable("st_oauth_m2m_tokens", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StOauthSession", b =>
                {
                    b.Property<string>("Gid")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("gid");

                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_id");

                    b.Property<long>("Exp")
                        .HasColumnType("bigint")
                        .HasColumnName("exp");

                    b.Property<string>("ExternalRefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("external_refresh_token");

                    b.Property<string>("InternalRefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("internal_refresh_token");

                    b.Property<string>("Jti")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jti");

                    b.Property<string>("SessionHandle")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("session_handle");

                    b.HasKey("Gid")
                        .HasName("st_oauth_sessions_pkey");

                    b.HasIndex("AppId", "ClientId")
                        .HasDatabaseName("ix_st_oauth_sessions_app_id_client_id");

                    b.HasIndex(new[] { "Exp" }, "oauth_session_exp_index")
                        .IsDescending()
                        .HasDatabaseName("ix_st_oauth_sessions_exp");

                    b.HasIndex(new[] { "AppId", "ExternalRefreshToken" }, "oauth_session_external_refresh_token_index")
                        .IsDescending(false, true)
                        .HasDatabaseName("ix_st_oauth_sessions_app_id_external_refresh_token");

                    b.HasIndex(new[] { "ExternalRefreshToken" }, "st_oauth_sessions_external_refresh_token_key")
                        .IsUnique()
                        .HasDatabaseName("ix_st_oauth_sessions_external_refresh_token");

                    b.HasIndex(new[] { "InternalRefreshToken" }, "st_oauth_sessions_internal_refresh_token_key")
                        .IsUnique()
                        .HasDatabaseName("ix_st_oauth_sessions_internal_refresh_token");

                    b.ToTable("st_oauth_sessions", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StPasswordlessCode", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("CodeId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("code_id")
                        .IsFixedLength();

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceIdHash")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("character(44)")
                        .HasColumnName("device_id_hash")
                        .IsFixedLength();

                    b.Property<string>("LinkCodeHash")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("character(44)")
                        .HasColumnName("link_code_hash")
                        .IsFixedLength();

                    b.HasKey("AppId", "TenantId", "CodeId")
                        .HasName("st_passwordless_codes_pkey");

                    b.HasIndex(new[] { "AppId", "TenantId", "CreatedAt" }, "passwordless_codes_created_at_index")
                        .HasDatabaseName("ix_st_passwordless_codes_app_id_tenant_id_created_at");

                    b.HasIndex(new[] { "AppId", "TenantId", "DeviceIdHash" }, "passwordless_codes_device_id_hash_index")
                        .HasDatabaseName("ix_st_passwordless_codes_app_id_tenant_id_device_id_hash");

                    b.HasIndex(new[] { "AppId", "TenantId", "LinkCodeHash" }, "st_passwordless_codes_link_code_hash_key")
                        .IsUnique()
                        .HasDatabaseName("ix_st_passwordless_codes_app_id_tenant_id_link_code_hash");

                    b.ToTable("st_passwordless_codes", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StPasswordlessDevice", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("DeviceIdHash")
                        .HasMaxLength(44)
                        .HasColumnType("character(44)")
                        .HasColumnName("device_id_hash")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_attempts");

                    b.Property<string>("LinkCodeSalt")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("character(44)")
                        .HasColumnName("link_code_salt")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("phone_number");

                    b.HasKey("AppId", "TenantId", "DeviceIdHash")
                        .HasName("st_passwordless_devices_pkey");

                    b.HasIndex(new[] { "AppId", "TenantId", "Email" }, "passwordless_devices_email_index")
                        .HasDatabaseName("ix_st_passwordless_devices_app_id_tenant_id_email");

                    b.HasIndex(new[] { "AppId", "TenantId", "PhoneNumber" }, "passwordless_devices_phone_number_index")
                        .HasDatabaseName("ix_st_passwordless_devices_app_id_tenant_id_phone_number");

                    b.HasIndex(new[] { "AppId", "TenantId" }, "passwordless_devices_tenant_id_index")
                        .HasDatabaseName("ix_st_passwordless_devices_app_id_tenant_id");

                    b.ToTable("st_passwordless_devices", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StPasswordlessUser", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("phone_number");

                    b.Property<long>("TimeJoined")
                        .HasColumnType("bigint")
                        .HasColumnName("time_joined");

                    b.HasKey("AppId", "UserId")
                        .HasName("st_passwordless_users_pkey");

                    b.HasIndex(new[] { "AppId", "Email" }, "passwordless_users_email_index")
                        .HasDatabaseName("ix_st_passwordless_users_app_id_email");

                    b.HasIndex(new[] { "AppId", "PhoneNumber" }, "passwordless_users_phone_number_index")
                        .HasDatabaseName("ix_st_passwordless_users_app_id_phone_number");

                    b.ToTable("st_passwordless_users", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StPasswordlessUserToTenant", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("phone_number");

                    b.HasKey("AppId", "TenantId", "UserId")
                        .HasName("st_passwordless_user_to_tenant_pkey");

                    b.HasIndex(new[] { "AppId", "TenantId", "Email" }, "passwordless_user_to_tenant_email_index")
                        .HasDatabaseName("ix_st_passwordless_user_to_tenant_app_id_tenant_id_email");

                    b.HasIndex(new[] { "AppId", "TenantId", "PhoneNumber" }, "passwordless_user_to_tenant_phone_number_index")
                        .HasDatabaseName("ix_st_passwordless_user_to_tenant_app_id_tenant_id_phone_number");

                    b.HasIndex(new[] { "AppId", "TenantId", "Email" }, "st_passwordless_user_to_tenant_email_key")
                        .IsUnique()
                        .HasDatabaseName("ix_st_passwordless_user_to_tenant_app_id_tenant_id_email1");

                    b.HasIndex(new[] { "AppId", "TenantId", "PhoneNumber" }, "st_passwordless_user_to_tenant_phone_number_key")
                        .IsUnique()
                        .HasDatabaseName("ix_st_passwordless_user_to_tenant_app_id_tenant_id_phone_numb~1");

                    b.ToTable("st_passwordless_user_to_tenant", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StRole", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("Role")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role");

                    b.HasKey("AppId", "Role")
                        .HasName("st_roles_pkey");

                    b.HasIndex(new[] { "AppId" }, "roles_app_id_index")
                        .HasDatabaseName("ix_st_roles_app_id");

                    b.ToTable("st_roles", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StRolePermission", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("Role")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role");

                    b.Property<string>("Permission")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("permission");

                    b.HasKey("AppId", "Role", "Permission")
                        .HasName("st_role_permissions_pkey");

                    b.HasIndex(new[] { "AppId", "Permission" }, "role_permissions_permission_index")
                        .HasDatabaseName("ix_st_role_permissions_app_id_permission");

                    b.HasIndex(new[] { "AppId", "Role" }, "role_permissions_role_index")
                        .HasDatabaseName("ix_st_role_permissions_app_id_role");

                    b.ToTable("st_role_permissions", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StSessionAccessTokenSigningKey", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<long>("CreatedAtTime")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at_time");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("AppId", "CreatedAtTime")
                        .HasName("st_session_access_token_signing_keys_pkey");

                    b.HasIndex(new[] { "AppId" }, "access_token_signing_keys_app_id_index")
                        .HasDatabaseName("ix_st_session_access_token_signing_keys_app_id");

                    b.ToTable("st_session_access_token_signing_keys", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StSessionInfo", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("SessionHandle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("session_handle");

                    b.Property<long>("CreatedAtTime")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at_time");

                    b.Property<long>("ExpiresAt")
                        .HasColumnType("bigint")
                        .HasColumnName("expires_at");

                    b.Property<string>("JwtUserPayload")
                        .HasColumnType("text")
                        .HasColumnName("jwt_user_payload");

                    b.Property<string>("RefreshTokenHash2")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("refresh_token_hash_2");

                    b.Property<string>("SessionData")
                        .HasColumnType("text")
                        .HasColumnName("session_data");

                    b.Property<bool>("UseStaticKey")
                        .HasColumnType("boolean")
                        .HasColumnName("use_static_key");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_id");

                    b.HasKey("AppId", "TenantId", "SessionHandle")
                        .HasName("st_session_info_pkey");

                    b.HasIndex(new[] { "ExpiresAt" }, "session_expiry_index")
                        .HasDatabaseName("ix_st_session_info_expires_at");

                    b.HasIndex(new[] { "AppId", "TenantId" }, "session_info_tenant_id_index")
                        .HasDatabaseName("ix_st_session_info_app_id_tenant_id");

                    b.HasIndex(new[] { "UserId", "AppId" }, "session_info_user_id_app_id_index")
                        .HasDatabaseName("ix_st_session_info_user_id_app_id");

                    b.ToTable("st_session_info", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenant", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<long?>("CreatedAtTime")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at_time");

                    b.HasKey("AppId", "TenantId")
                        .HasName("st_tenants_pkey");

                    b.HasIndex(new[] { "AppId" }, "tenants_app_id_index")
                        .HasDatabaseName("ix_st_tenants_app_id");

                    b.ToTable("st_tenants", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenantConfig", b =>
                {
                    b.Property<string>("ConnectionUriDomain")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("connection_uri_domain")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("CoreConfig")
                        .HasColumnType("text")
                        .HasColumnName("core_config");

                    b.Property<bool?>("EmailPasswordEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("email_password_enabled");

                    b.Property<bool?>("IsFirstFactorsNull")
                        .HasColumnType("boolean")
                        .HasColumnName("is_first_factors_null");

                    b.Property<bool?>("PasswordlessEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("passwordless_enabled");

                    b.Property<bool?>("ThirdPartyEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("third_party_enabled");

                    b.HasKey("ConnectionUriDomain", "AppId", "TenantId")
                        .HasName("st_tenant_configs_pkey");

                    b.ToTable("st_tenant_configs", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenantFirstFactor", b =>
                {
                    b.Property<string>("ConnectionUriDomain")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("connection_uri_domain")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("FactorId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("factor_id");

                    b.HasKey("ConnectionUriDomain", "AppId", "TenantId", "FactorId")
                        .HasName("st_tenant_first_factors_pkey");

                    b.HasIndex(new[] { "ConnectionUriDomain", "AppId", "TenantId" }, "tenant_first_factors_tenant_id_index")
                        .HasDatabaseName("ix_st_tenant_first_factors_connection_uri_domain_app_id_tenant");

                    b.ToTable("st_tenant_first_factors", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenantRequiredSecondaryFactor", b =>
                {
                    b.Property<string>("ConnectionUriDomain")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("connection_uri_domain")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("FactorId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("factor_id");

                    b.HasKey("ConnectionUriDomain", "AppId", "TenantId", "FactorId")
                        .HasName("st_tenant_required_secondary_factors_pkey");

                    b.HasIndex(new[] { "ConnectionUriDomain", "AppId", "TenantId" }, "tenant_default_required_factor_ids_tenant_id_index")
                        .HasDatabaseName("ix_st_tenant_required_secondary_factors_connection_uri_domain_");

                    b.ToTable("st_tenant_required_secondary_factors", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenantThirdpartyProvider", b =>
                {
                    b.Property<string>("ConnectionUriDomain")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("connection_uri_domain")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("ThirdPartyId")
                        .HasMaxLength(28)
                        .HasColumnType("character varying(28)")
                        .HasColumnName("third_party_id");

                    b.Property<string>("AuthorizationEndpoint")
                        .HasColumnType("text")
                        .HasColumnName("authorization_endpoint");

                    b.Property<string>("AuthorizationEndpointQueryParams")
                        .HasColumnType("text")
                        .HasColumnName("authorization_endpoint_query_params");

                    b.Property<string>("JwksUri")
                        .HasColumnType("text")
                        .HasColumnName("jwks_uri");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<string>("OidcDiscoveryEndpoint")
                        .HasColumnType("text")
                        .HasColumnName("oidc_discovery_endpoint");

                    b.Property<bool?>("RequireEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("require_email");

                    b.Property<string>("TokenEndpoint")
                        .HasColumnType("text")
                        .HasColumnName("token_endpoint");

                    b.Property<string>("TokenEndpointBodyParams")
                        .HasColumnType("text")
                        .HasColumnName("token_endpoint_body_params");

                    b.Property<string>("UserInfoEndpoint")
                        .HasColumnType("text")
                        .HasColumnName("user_info_endpoint");

                    b.Property<string>("UserInfoEndpointHeaders")
                        .HasColumnType("text")
                        .HasColumnName("user_info_endpoint_headers");

                    b.Property<string>("UserInfoEndpointQueryParams")
                        .HasColumnType("text")
                        .HasColumnName("user_info_endpoint_query_params");

                    b.Property<string>("UserInfoMapFromIdTokenPayloadEmail")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("user_info_map_from_id_token_payload_email");

                    b.Property<string>("UserInfoMapFromIdTokenPayloadEmailVerified")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("user_info_map_from_id_token_payload_email_verified");

                    b.Property<string>("UserInfoMapFromIdTokenPayloadUserId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("user_info_map_from_id_token_payload_user_id");

                    b.Property<string>("UserInfoMapFromUserInfoEndpointEmail")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("user_info_map_from_user_info_endpoint_email");

                    b.Property<string>("UserInfoMapFromUserInfoEndpointEmailVerified")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("user_info_map_from_user_info_endpoint_email_verified");

                    b.Property<string>("UserInfoMapFromUserInfoEndpointUserId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("user_info_map_from_user_info_endpoint_user_id");

                    b.HasKey("ConnectionUriDomain", "AppId", "TenantId", "ThirdPartyId")
                        .HasName("st_tenant_thirdparty_providers_pkey");

                    b.HasIndex(new[] { "ConnectionUriDomain", "AppId", "TenantId" }, "tenant_thirdparty_providers_tenant_id_index")
                        .HasDatabaseName("ix_st_tenant_thirdparty_providers_connection_uri_domain_app_id");

                    b.ToTable("st_tenant_thirdparty_providers", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenantThirdpartyProviderClient", b =>
                {
                    b.Property<string>("ConnectionUriDomain")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("connection_uri_domain")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("ThirdPartyId")
                        .HasMaxLength(28)
                        .HasColumnType("character varying(28)")
                        .HasColumnName("third_party_id");

                    b.Property<string>("ClientType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("client_type")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("AdditionalConfig")
                        .HasColumnType("text")
                        .HasColumnName("additional_config");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<bool?>("ForcePkce")
                        .HasColumnType("boolean")
                        .HasColumnName("force_pkce");

                    b.PrimitiveCollection<List<string>>("Scope")
                        .HasColumnType("character varying(128)[]")
                        .HasColumnName("scope");

                    b.HasKey("ConnectionUriDomain", "AppId", "TenantId", "ThirdPartyId", "ClientType")
                        .HasName("st_tenant_thirdparty_provider_clients_pkey");

                    b.HasIndex(new[] { "ConnectionUriDomain", "AppId", "TenantId", "ThirdPartyId" }, "tenant_thirdparty_provider_clients_third_party_id_index")
                        .HasDatabaseName("ix_st_tenant_thirdparty_provider_clients_connection_uri_domain");

                    b.ToTable("st_tenant_thirdparty_provider_clients", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StThirdpartyUser", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("ThirdPartyId")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character varying(28)")
                        .HasColumnName("third_party_id");

                    b.Property<string>("ThirdPartyUserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("third_party_user_id");

                    b.Property<long>("TimeJoined")
                        .HasColumnType("bigint")
                        .HasColumnName("time_joined");

                    b.HasKey("AppId", "UserId")
                        .HasName("st_thirdparty_users_pkey");

                    b.HasIndex(new[] { "AppId", "Email" }, "thirdparty_users_email_index")
                        .HasDatabaseName("ix_st_thirdparty_users_app_id_email");

                    b.HasIndex(new[] { "AppId", "ThirdPartyId", "ThirdPartyUserId" }, "thirdparty_users_thirdparty_user_id_index")
                        .HasDatabaseName("ix_st_thirdparty_users_app_id_third_party_id_third_party_user_");

                    b.ToTable("st_thirdparty_users", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StThirdpartyUserToTenant", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.Property<string>("ThirdPartyId")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character varying(28)")
                        .HasColumnName("third_party_id");

                    b.Property<string>("ThirdPartyUserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("third_party_user_id");

                    b.HasKey("AppId", "TenantId", "UserId")
                        .HasName("st_thirdparty_user_to_tenant_pkey");

                    b.HasIndex(new[] { "AppId", "TenantId", "ThirdPartyId", "ThirdPartyUserId" }, "st_thirdparty_user_to_tenant_third_party_user_id_key")
                        .IsUnique()
                        .HasDatabaseName("ix_st_thirdparty_user_to_tenant_app_id_tenant_id_third_party_i");

                    b.HasIndex(new[] { "AppId", "TenantId", "ThirdPartyId", "ThirdPartyUserId" }, "thirdparty_user_to_tenant_third_party_user_id_index")
                        .HasDatabaseName("ix_st_thirdparty_user_to_tenant_app_id_tenant_id_third_party_i1");

                    b.ToTable("st_thirdparty_user_to_tenant", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTotpUsedCode", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_id");

                    b.Property<long>("CreatedTimeMs")
                        .HasColumnType("bigint")
                        .HasColumnName("created_time_ms");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("code");

                    b.Property<long>("ExpiryTimeMs")
                        .HasColumnType("bigint")
                        .HasColumnName("expiry_time_ms");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid");

                    b.HasKey("AppId", "TenantId", "UserId", "CreatedTimeMs")
                        .HasName("st_totp_used_codes_pkey");

                    b.HasIndex(new[] { "AppId", "TenantId", "ExpiryTimeMs" }, "totp_used_codes_expiry_time_ms_index")
                        .HasDatabaseName("ix_st_totp_used_codes_app_id_tenant_id_expiry_time_ms");

                    b.HasIndex(new[] { "AppId", "TenantId" }, "totp_used_codes_tenant_id_index")
                        .HasDatabaseName("ix_st_totp_used_codes_app_id_tenant_id");

                    b.HasIndex(new[] { "AppId", "UserId" }, "totp_used_codes_user_id_index")
                        .HasDatabaseName("ix_st_totp_used_codes_app_id_user_id");

                    b.ToTable("st_totp_used_codes", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTotpUser", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_id");

                    b.HasKey("AppId", "UserId")
                        .HasName("st_totp_users_pkey");

                    b.HasIndex(new[] { "AppId" }, "totp_users_app_id_index")
                        .HasDatabaseName("ix_st_totp_users_app_id");

                    b.ToTable("st_totp_users", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTotpUserDevice", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_id");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("device_name");

                    b.Property<long?>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<int>("Period")
                        .HasColumnType("integer")
                        .HasColumnName("period");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("secret_key");

                    b.Property<int>("Skew")
                        .HasColumnType("integer")
                        .HasColumnName("skew");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean")
                        .HasColumnName("verified");

                    b.HasKey("AppId", "UserId", "DeviceName")
                        .HasName("st_totp_user_devices_pkey");

                    b.HasIndex(new[] { "AppId", "UserId" }, "totp_user_devices_user_id_index")
                        .HasDatabaseName("ix_st_totp_user_devices_app_id_user_id");

                    b.ToTable("st_totp_user_devices", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StUserLastActive", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_id");

                    b.Property<long?>("LastActiveTime")
                        .HasColumnType("bigint")
                        .HasColumnName("last_active_time");

                    b.HasKey("AppId", "UserId")
                        .HasName("st_user_last_active_pkey");

                    b.HasIndex(new[] { "AppId" }, "user_last_active_app_id_index")
                        .HasDatabaseName("ix_st_user_last_active_app_id");

                    b.HasIndex(new[] { "LastActiveTime", "AppId" }, "user_last_active_last_active_time_index")
                        .IsDescending()
                        .HasDatabaseName("ix_st_user_last_active_last_active_time_app_id");

                    b.ToTable("st_user_last_active", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StUserMetadatum", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserMetadata")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_metadata");

                    b.HasKey("AppId", "UserId")
                        .HasName("st_user_metadata_pkey");

                    b.HasIndex(new[] { "AppId" }, "user_metadata_app_id_index")
                        .HasDatabaseName("ix_st_user_metadata_app_id");

                    b.ToTable("st_user_metadata", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StUserRole", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_id");

                    b.Property<string>("Role")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role");

                    b.HasKey("AppId", "TenantId", "UserId", "Role")
                        .HasName("st_user_roles_pkey");

                    b.HasIndex(new[] { "AppId", "Role" }, "user_roles_app_id_role_index")
                        .HasDatabaseName("ix_st_user_roles_app_id_role");

                    b.HasIndex(new[] { "AppId", "TenantId", "Role" }, "user_roles_role_index")
                        .HasDatabaseName("ix_st_user_roles_app_id_tenant_id_role");

                    b.HasIndex(new[] { "AppId", "TenantId" }, "user_roles_tenant_id_index")
                        .HasDatabaseName("ix_st_user_roles_app_id_tenant_id");

                    b.ToTable("st_user_roles", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StUseridMapping", b =>
                {
                    b.Property<string>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("SupertokensUserId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("supertokens_user_id")
                        .IsFixedLength();

                    b.Property<string>("ExternalUserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("external_user_id");

                    b.Property<string>("ExternalUserIdInfo")
                        .HasColumnType("text")
                        .HasColumnName("external_user_id_info");

                    b.HasKey("AppId", "SupertokensUserId", "ExternalUserId")
                        .HasName("st_userid_mapping_pkey");

                    b.HasIndex(new[] { "AppId", "ExternalUserId" }, "st_userid_mapping_external_user_id_key")
                        .IsUnique()
                        .HasDatabaseName("ix_st_userid_mapping_app_id_external_user_id");

                    b.HasIndex(new[] { "AppId", "SupertokensUserId" }, "st_userid_mapping_supertokens_user_id_key")
                        .IsUnique()
                        .HasDatabaseName("ix_st_userid_mapping_app_id_supertokens_user_id");

                    b.HasIndex(new[] { "AppId", "SupertokensUserId" }, "userid_mapping_supertokens_user_id_index")
                        .HasDatabaseName("ix_st_userid_mapping_app_id_supertokens_user_id1");

                    b.ToTable("st_userid_mapping", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.Task", b =>
                {
                    b.Property<long>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TaskId"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("task_type_id");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("teacher_id")
                        .IsFixedLength();

                    b.HasKey("TaskId")
                        .HasName("pk_tasks");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_tasks_course_id");

                    b.HasIndex("TaskTypeId")
                        .HasDatabaseName("ix_tasks_task_type_id");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_tasks_teacher_id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.TaskType", b =>
                {
                    b.Property<int>("TaskTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskTypeId"));

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("TaskTypeId")
                        .HasName("pk_task_types");

                    b.ToTable("task_types", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.TeacherInfo", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("teacher_id")
                        .IsFixedLength();

                    b.Property<int>("AcademicId")
                        .HasColumnType("integer")
                        .HasColumnName("academic_id");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer")
                        .HasColumnName("university_id");

                    b.HasKey("TeacherId")
                        .HasName("pk_teacher_infos");

                    b.HasIndex("AcademicId")
                        .HasDatabaseName("ix_teacher_infos_academic_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_teacher_infos_department_id");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_teacher_infos_university_id");

                    b.ToTable("teacher_infos", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("university_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniversityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("UniversityId")
                        .HasName("pk_universities");

                    b.ToTable("universities", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.Property<string>("AppId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("app_id")
                        .HasDefaultValueSql("'public'::character varying");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("patronymic");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex("AppId", "UserId")
                        .HasDatabaseName("ix_users_app_id_user_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("UniPro.Domain.Entities.Academic", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.University", "University")
                        .WithMany("Academics")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academics_universities_university_id");

                    b.Navigation("University");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.Department", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.Academic", "Academic")
                        .WithMany("Departments")
                        .HasForeignKey("AcademicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departments_academics_academic_id");

                    b.Navigation("Academic");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.Grade", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.StudentTask", "StudentTask")
                        .WithOne("Grade")
                        .HasForeignKey("UniPro.Domain.Entities.Grade", "StudentId", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades_student_tasks_student_id_task_id");

                    b.Navigation("StudentTask");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.StudentGroup", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.Department", "Department")
                        .WithMany("StudentGroups")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_groups_departments_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.StudentInfo", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.Academic", "Academic")
                        .WithMany("StudentInfos")
                        .HasForeignKey("AcademicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_infos_academics_academic_id");

                    b.HasOne("UniPro.Domain.Entities.Department", "Department")
                        .WithMany("StudentInfos")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_infos_departments_department_id");

                    b.HasOne("UniPro.Domain.Entities.StudentGroup", "StudentGroup")
                        .WithMany("StudentInfos")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_infos_student_groups_student_group_id");

                    b.HasOne("UniPro.Domain.Entities.User", "Student")
                        .WithOne("StudentInfo")
                        .HasForeignKey("UniPro.Domain.Entities.StudentInfo", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_infos_users_student_id");

                    b.HasOne("UniPro.Domain.Entities.University", "University")
                        .WithMany("StudentInfos")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_infos_universities_university_id");

                    b.Navigation("Academic");

                    b.Navigation("Department");

                    b.Navigation("Student");

                    b.Navigation("StudentGroup");

                    b.Navigation("University");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.StudentTask", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.StudentInfo", "Student")
                        .WithMany("StudentTasks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_tasks_student_infos_student_id");

                    b.HasOne("UniPro.Domain.Entities.Task", "Task")
                        .WithMany("StudentTasks")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_tasks_tasks_task_type_id");

                    b.Navigation("Student");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StAllAuthRecipeUser", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StAppIdToUserId", "StAppIdToUserId")
                        .WithMany("StAllAuthRecipeUserStAppIdToUserIds")
                        .HasForeignKey("AppId", "PrimaryOrRecipeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_all_auth_recipe_users_primary_or_recipe_user_id_fkey");

                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTenant", "StTenant")
                        .WithMany("StAllAuthRecipeUsers")
                        .HasForeignKey("AppId", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_all_auth_recipe_users_tenant_id_fkey");

                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StAppIdToUserId", "StAppIdToUserIdNavigation")
                        .WithMany("StAllAuthRecipeUserStAppIdToUserIdNavigations")
                        .HasForeignKey("AppId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_all_auth_recipe_users_user_id_fkey");

                    b.Navigation("StAppIdToUserId");

                    b.Navigation("StAppIdToUserIdNavigation");

                    b.Navigation("StTenant");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StAppIdToUserId", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StApp", "App")
                        .WithMany("StAppIdToUserIds")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_app_id_to_user_id_app_id_fkey");

                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StAppIdToUserId", "StAppIdToUserIdNavigation")
                        .WithMany("InverseStAppIdToUserIdNavigation")
                        .HasForeignKey("AppId", "PrimaryOrRecipeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_app_id_to_user_id_primary_or_recipe_user_id_fkey");

                    b.Navigation("App");

                    b.Navigation("StAppIdToUserIdNavigation");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StBulkImportUser", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StApp", "App")
                        .WithMany("StBulkImportUsers")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_bulk_import_users_app_id_fkey");

                    b.Navigation("App");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StDashboardUser", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StApp", "App")
                        .WithMany("StDashboardUsers")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_dashboard_users_app_id_fkey");

                    b.Navigation("App");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StDashboardUserSession", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StDashboardUser", "StDashboardUser")
                        .WithMany("StDashboardUserSessions")
                        .HasForeignKey("AppId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_dashboard_user_sessions_user_id_fkey");

                    b.Navigation("StDashboardUser");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StEmailpasswordPswdResetToken", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StAppIdToUserId", "StAppIdToUserId")
                        .WithMany("StEmailpasswordPswdResetTokens")
                        .HasForeignKey("AppId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_emailpassword_pswd_reset_tokens_user_id_fkey");

                    b.Navigation("StAppIdToUserId");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StEmailpasswordUser", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StAppIdToUserId", "StAppIdToUserId")
                        .WithOne("StEmailpasswordUser")
                        .HasForeignKey("UniPro.Domain.Entities.SuperTokens.StEmailpasswordUser", "AppId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_emailpassword_users_user_id_fkey");

                    b.Navigation("StAppIdToUserId");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StEmailpasswordUserToTenant", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StAllAuthRecipeUser", "StAllAuthRecipeUser")
                        .WithOne("StEmailpasswordUserToTenant")
                        .HasForeignKey("UniPro.Domain.Entities.SuperTokens.StEmailpasswordUserToTenant", "AppId", "TenantId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_emailpassword_user_to_tenant_user_id_fkey");

                    b.Navigation("StAllAuthRecipeUser");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StEmailverificationToken", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTenant", "StTenant")
                        .WithMany("StEmailverificationTokens")
                        .HasForeignKey("AppId", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_emailverification_tokens_tenant_id_fkey");

                    b.Navigation("StTenant");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StEmailverificationVerifiedEmail", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StApp", "App")
                        .WithMany("StEmailverificationVerifiedEmails")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_emailverification_verified_emails_app_id_fkey");

                    b.Navigation("App");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StJwtSigningKey", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StApp", "App")
                        .WithMany("StJwtSigningKeys")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_jwt_signing_keys_app_id_fkey");

                    b.Navigation("App");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StKeyValue", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTenant", "StTenant")
                        .WithMany("StKeyValues")
                        .HasForeignKey("AppId", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_key_value_tenant_id_fkey");

                    b.Navigation("StTenant");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StOauthClient", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StApp", "App")
                        .WithMany("StOauthClients")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_oauth_clients_app_id_fkey");

                    b.Navigation("App");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StOauthLogoutChallenge", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StOauthClient", "StOauthClient")
                        .WithMany("StOauthLogoutChallenges")
                        .HasForeignKey("AppId", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_oauth_logout_challenges_client_id_fkey");

                    b.Navigation("StOauthClient");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StOauthM2mToken", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StOauthClient", "StOauthClient")
                        .WithMany("StOauthM2mTokens")
                        .HasForeignKey("AppId", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_oauth_m2m_tokens_client_id_fkey");

                    b.Navigation("StOauthClient");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StOauthSession", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StOauthClient", "StOauthClient")
                        .WithMany("StOauthSessions")
                        .HasForeignKey("AppId", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("st_oauth_sessions_client_id_fkey");

                    b.Navigation("StOauthClient");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StPasswordlessCode", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StPasswordlessDevice", "StPasswordlessDevice")
                        .WithMany("StPasswordlessCodes")
                        .HasForeignKey("AppId", "TenantId", "DeviceIdHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_passwordless_codes_device_id_hash_fkey");

                    b.Navigation("StPasswordlessDevice");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StPasswordlessDevice", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTenant", "StTenant")
                        .WithMany("StPasswordlessDevices")
                        .HasForeignKey("AppId", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_passwordless_devices_tenant_id_fkey");

                    b.Navigation("StTenant");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StPasswordlessUser", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StAppIdToUserId", "StAppIdToUserId")
                        .WithOne("StPasswordlessUser")
                        .HasForeignKey("UniPro.Domain.Entities.SuperTokens.StPasswordlessUser", "AppId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_passwordless_users_user_id_fkey");

                    b.Navigation("StAppIdToUserId");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StPasswordlessUserToTenant", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StAllAuthRecipeUser", "StAllAuthRecipeUser")
                        .WithOne("StPasswordlessUserToTenant")
                        .HasForeignKey("UniPro.Domain.Entities.SuperTokens.StPasswordlessUserToTenant", "AppId", "TenantId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_passwordless_user_to_tenant_user_id_fkey");

                    b.Navigation("StAllAuthRecipeUser");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StRole", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StApp", "App")
                        .WithMany("StRoles")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_roles_app_id_fkey");

                    b.Navigation("App");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StRolePermission", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StRole", "StRole")
                        .WithMany("StRolePermissions")
                        .HasForeignKey("AppId", "Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_role_permissions_role_fkey");

                    b.Navigation("StRole");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StSessionAccessTokenSigningKey", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StApp", "App")
                        .WithMany("StSessionAccessTokenSigningKeys")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_session_access_token_signing_keys_app_id_fkey");

                    b.Navigation("App");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StSessionInfo", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTenant", "StTenant")
                        .WithMany("StSessionInfos")
                        .HasForeignKey("AppId", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_session_info_tenant_id_fkey");

                    b.Navigation("StTenant");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenant", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StApp", "App")
                        .WithMany("StTenants")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_tenants_app_id_fkey");

                    b.Navigation("App");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenantFirstFactor", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTenantConfig", "StTenantConfig")
                        .WithMany("StTenantFirstFactors")
                        .HasForeignKey("ConnectionUriDomain", "AppId", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_tenant_first_factors_tenant_id_fkey");

                    b.Navigation("StTenantConfig");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenantRequiredSecondaryFactor", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTenantConfig", "StTenantConfig")
                        .WithMany("StTenantRequiredSecondaryFactors")
                        .HasForeignKey("ConnectionUriDomain", "AppId", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_tenant_required_secondary_factors_tenant_id_fkey");

                    b.Navigation("StTenantConfig");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenantThirdpartyProvider", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTenantConfig", "StTenantConfig")
                        .WithMany("StTenantThirdpartyProviders")
                        .HasForeignKey("ConnectionUriDomain", "AppId", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_tenant_thirdparty_providers_tenant_id_fkey");

                    b.Navigation("StTenantConfig");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenantThirdpartyProviderClient", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTenantThirdpartyProvider", "StTenantThirdpartyProvider")
                        .WithMany("StTenantThirdpartyProviderClients")
                        .HasForeignKey("ConnectionUriDomain", "AppId", "TenantId", "ThirdPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_tenant_thirdparty_provider_clients_third_party_id_fkey");

                    b.Navigation("StTenantThirdpartyProvider");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StThirdpartyUser", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StAppIdToUserId", "StAppIdToUserId")
                        .WithOne("StThirdpartyUser")
                        .HasForeignKey("UniPro.Domain.Entities.SuperTokens.StThirdpartyUser", "AppId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_thirdparty_users_user_id_fkey");

                    b.Navigation("StAppIdToUserId");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StThirdpartyUserToTenant", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StAllAuthRecipeUser", "StAllAuthRecipeUser")
                        .WithOne("StThirdpartyUserToTenant")
                        .HasForeignKey("UniPro.Domain.Entities.SuperTokens.StThirdpartyUserToTenant", "AppId", "TenantId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_thirdparty_user_to_tenant_user_id_fkey");

                    b.Navigation("StAllAuthRecipeUser");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTotpUsedCode", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTenant", "StTenant")
                        .WithMany("StTotpUsedCodes")
                        .HasForeignKey("AppId", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_totp_used_codes_tenant_id_fkey");

                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTotpUser", "StTotpUser")
                        .WithMany("StTotpUsedCodes")
                        .HasForeignKey("AppId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_totp_used_codes_user_id_fkey");

                    b.Navigation("StTenant");

                    b.Navigation("StTotpUser");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTotpUser", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StApp", "App")
                        .WithMany("StTotpUsers")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_totp_users_app_id_fkey");

                    b.Navigation("App");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTotpUserDevice", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTotpUser", "StTotpUser")
                        .WithMany("StTotpUserDevices")
                        .HasForeignKey("AppId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_totp_user_devices_user_id_fkey");

                    b.Navigation("StTotpUser");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StUserLastActive", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StApp", "App")
                        .WithMany("StUserLastActives")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_user_last_active_app_id_fkey");

                    b.Navigation("App");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StUserMetadatum", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StApp", "App")
                        .WithMany("StUserMetadata")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_user_metadata_app_id_fkey");

                    b.Navigation("App");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StUserRole", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StTenant", "StTenant")
                        .WithMany("StUserRoles")
                        .HasForeignKey("AppId", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_user_roles_tenant_id_fkey");

                    b.Navigation("StTenant");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StUseridMapping", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StAppIdToUserId", "StAppIdToUserId")
                        .WithOne("StUseridMapping")
                        .HasForeignKey("UniPro.Domain.Entities.SuperTokens.StUseridMapping", "AppId", "SupertokensUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_userid_mapping_supertokens_user_id_fkey");

                    b.Navigation("StAppIdToUserId");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.Task", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.Course", "Course")
                        .WithMany("Tasks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_courses_course_id");

                    b.HasOne("UniPro.Domain.Entities.TaskType", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_task_types_task_type_id");

                    b.HasOne("UniPro.Domain.Entities.TeacherInfo", "Teacher")
                        .WithMany("Tasks")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_teacher_infos_teacher_id");

                    b.Navigation("Course");

                    b.Navigation("TaskType");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.TeacherInfo", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.Academic", "Academic")
                        .WithMany("TeacherInfos")
                        .HasForeignKey("AcademicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_infos_academics_academic_id");

                    b.HasOne("UniPro.Domain.Entities.Department", "Department")
                        .WithMany("TeacherInfos")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_infos_departments_department_id");

                    b.HasOne("UniPro.Domain.Entities.User", "Teacher")
                        .WithOne("TeacherInfo")
                        .HasForeignKey("UniPro.Domain.Entities.TeacherInfo", "TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_infos_users_teacher_id");

                    b.HasOne("UniPro.Domain.Entities.University", "University")
                        .WithMany("TeacherInfos")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_infos_universities_university_id");

                    b.Navigation("Academic");

                    b.Navigation("Department");

                    b.Navigation("Teacher");

                    b.Navigation("University");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.User", b =>
                {
                    b.HasOne("UniPro.Domain.Entities.SuperTokens.StAppIdToUserId", "StAppIdToUserId")
                        .WithMany("Users")
                        .HasForeignKey("AppId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("st_users_user_id_fkey");

                    b.Navigation("StAppIdToUserId");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.Academic", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("StudentInfos");

                    b.Navigation("TeacherInfos");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.Course", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.Department", b =>
                {
                    b.Navigation("StudentGroups");

                    b.Navigation("StudentInfos");

                    b.Navigation("TeacherInfos");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.StudentGroup", b =>
                {
                    b.Navigation("StudentInfos");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.StudentInfo", b =>
                {
                    b.Navigation("StudentTasks");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.StudentTask", b =>
                {
                    b.Navigation("Grade")
                        .IsRequired();
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StAllAuthRecipeUser", b =>
                {
                    b.Navigation("StEmailpasswordUserToTenant");

                    b.Navigation("StPasswordlessUserToTenant");

                    b.Navigation("StThirdpartyUserToTenant");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StApp", b =>
                {
                    b.Navigation("StAppIdToUserIds");

                    b.Navigation("StBulkImportUsers");

                    b.Navigation("StDashboardUsers");

                    b.Navigation("StEmailverificationVerifiedEmails");

                    b.Navigation("StJwtSigningKeys");

                    b.Navigation("StOauthClients");

                    b.Navigation("StRoles");

                    b.Navigation("StSessionAccessTokenSigningKeys");

                    b.Navigation("StTenants");

                    b.Navigation("StTotpUsers");

                    b.Navigation("StUserLastActives");

                    b.Navigation("StUserMetadata");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StAppIdToUserId", b =>
                {
                    b.Navigation("InverseStAppIdToUserIdNavigation");

                    b.Navigation("StAllAuthRecipeUserStAppIdToUserIdNavigations");

                    b.Navigation("StAllAuthRecipeUserStAppIdToUserIds");

                    b.Navigation("StEmailpasswordPswdResetTokens");

                    b.Navigation("StEmailpasswordUser");

                    b.Navigation("StPasswordlessUser");

                    b.Navigation("StThirdpartyUser");

                    b.Navigation("StUseridMapping");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StDashboardUser", b =>
                {
                    b.Navigation("StDashboardUserSessions");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StOauthClient", b =>
                {
                    b.Navigation("StOauthLogoutChallenges");

                    b.Navigation("StOauthM2mTokens");

                    b.Navigation("StOauthSessions");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StPasswordlessDevice", b =>
                {
                    b.Navigation("StPasswordlessCodes");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StRole", b =>
                {
                    b.Navigation("StRolePermissions");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenant", b =>
                {
                    b.Navigation("StAllAuthRecipeUsers");

                    b.Navigation("StEmailverificationTokens");

                    b.Navigation("StKeyValues");

                    b.Navigation("StPasswordlessDevices");

                    b.Navigation("StSessionInfos");

                    b.Navigation("StTotpUsedCodes");

                    b.Navigation("StUserRoles");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenantConfig", b =>
                {
                    b.Navigation("StTenantFirstFactors");

                    b.Navigation("StTenantRequiredSecondaryFactors");

                    b.Navigation("StTenantThirdpartyProviders");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTenantThirdpartyProvider", b =>
                {
                    b.Navigation("StTenantThirdpartyProviderClients");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.SuperTokens.StTotpUser", b =>
                {
                    b.Navigation("StTotpUsedCodes");

                    b.Navigation("StTotpUserDevices");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.Task", b =>
                {
                    b.Navigation("StudentTasks");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.TaskType", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.TeacherInfo", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.University", b =>
                {
                    b.Navigation("Academics");

                    b.Navigation("StudentInfos");

                    b.Navigation("TeacherInfos");
                });

            modelBuilder.Entity("UniPro.Domain.Entities.User", b =>
                {
                    b.Navigation("StudentInfo")
                        .IsRequired();

                    b.Navigation("TeacherInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
